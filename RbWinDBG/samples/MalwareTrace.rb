require 'RbWinDBG'

$fdOut = File.open(File.join(File.dirname(__FILE__), "mwTrace.txt"), "a")

def msg(m)
	$stdout.puts("[+] #{m}")
	$fdOut.puts(m)
end

def setup_filesystem_monitor(dbg)
=begin
	dbg.bpx(dbg.resolve_name('kernel32.dll!CreateFileW')) do
		path = dbg.read_wstring(dbg.get_stack_arg(1))
		mode = dbg.get_stack_arg(2)
		
		msg "CreateFileW: #{path}"
	end
=end
end

def setup_registry_monitor(dbg)
end

def setup_exec_monitor(dbg)
	dbg.bpx(dbg.resolve_name('kernel32.dll!CreateProcessW')) do
		app = dbg.utils.read_wstring(dbg.get_stack_arg(1))
		cmd = dbg.utils.read_wstring(dbg.get_stack_arg(2))
		
		msg "Attempting CreateProcessW Execution App: #{app} Cmd: #{cmd}"
	end
	
	dbg.bpx(dbg.resolve_name('kernel32.dll!WinExec')) do
		cmd = dbg.utils.read_string(dbg.get_stack_arg(1))
		msg "Attempting WinExec Execution: #{cmd}"
	end
end

def setup_urlmon_monitor(dbg)
end

def hide_debugger(dbg)
	msg "Hiding Debugger"
	
	dbg.execute_code(
		Metasm::Shellcode.assemble(Metasm::Ia32.new, %Q{
			mov eax, fs:[0x30]
			add eax, 2
			mov byte ptr[eax], 0
		}).encode_string()
	)
end

if __FILE__ == $0
	#dbg = RbWinDBG.start(ARGV.map {|e| "\"#{e}\"" }.join(' '))
	dbg = RbWinDBG.start(ARGV.join(' '))
	
	msg "----"
	msg "ExploitTrace started on: #{Time.now}"
	msg "Process Handle: 0x%08x" % [dbg.process.handle]
	msg "EP: 0x%08x" % [dbg.entrypoint]
	
	dbg.on_entrypoint do
		msg "Executable Path: " + dbg.process.modules[0].path
		
		#hide_debugger(dbg)
		setup_urlmon_monitor(dbg)
		setup_exec_monitor(dbg)
		setup_registry_monitor(dbg)
		setup_filesystem_monitor(dbg)
		
		dbg.on_library_load do |lib|
			msg "LoadLibrary: #{lib}"
		end
	end
	
	begin
		dbg.start
	rescue => e
		msg "Error Occurred: #{e.message}"
		msg e.backtrace.join("\n")
	ensure
		dbg.stop
	end
end