$:.unshift("C:\\Lib\\metasm")

require 'metasm'
require 'optparse'

def pe_valid_module_addr?(pr, addr)
	pr.modules.each do |mod|
		mod_pe = ::Metasm::LoadedPE.load(pr.memory[mod.addr, mod.size])
		mod_pe.decode_header
		mod_pe.sections.each do |section|
			next unless section.characteristics.include? "MEM_EXECUTE"
			next unless ((addr >= (mod.addr + section.virtaddr)) and (addr < (mod.addr + section.virtaddr + section.rawsize)))
			
			# We have a valid addr within executable section of a module
			return true
		end
	end
	
	return false
end

def scan_thread_context(pr, th, ctx)
	eip = ctx[:eip]
	#puts("[+] ThreadId: #{th.tid} EIP: 0x%08x" % [eip])
	
	puts ("[+] Scanning Thread: #{th.tid} EIP: 0x%08x" % [eip])
	unless pe_valid_module_addr?(pr, eip)
		puts("[+] Possible Injected Code Found @ 0x%08x" % [eip])
	end
end

def scan_process(pr)
	puts "[+] Scanning: #{pr.modules[0].path}"
	
	pr.threads.each do |tid|
		thread = ::Metasm::WinOS::Thread.new(tid.to_i, nil, pr)
		context = thread.context
		context.update
		
		scan_thread_context(pr, thread, context)
	end
end

if __FILE__ == $0
	$options = {
		:pids => []
	}
	
	opp = OptionParser.new do |opts|
		opts.banner = "Usage: ProcScan.rb [options]"
		
		opts.on("-p", "--pid [PIDS]", "PIDs to scan (default: all) (eg: 1,2,3,4)") do |v|
			$options[:pids] = v.to_s.split(",").map {|i| i.strip.to_i }
		end
		
		opts.on("-h") do
			puts opp
		end
	end
	
	if ARGV.empty?
		print "** WARN: Scan all processes? This might take some time. Proceeed (yes/no)?: "
		exit(1) if $stdin.gets.to_s.strip !~ /^y/i
	else
		opp.parse!
	end
	
	::Metasm::WinOS.list_processes.each do |process|
		if process.modules.empty?	
			# We don't have priv
			puts "[+] Cannot enumerate process with PID: %d (insufficient privilege)" % [process.pid]
			next
		end
			
		scan_process(process) if ($options[:pids].empty?) or ($options[:pids].include?(process.pid))
	end
end