#ifndef _STORE_H
#define _STORE_H

#include <windows.h>

#define HI_MEM_STATE_ALLOCATED	(0x01)
#define HI_MEM_STATE_FREED		(0x01 << 1)

typedef struct _tagHiMemoryContext
{
	DWORD	dwBaseAddress;			// VirtualAllocEx()'d addr
	SIZE_T	dwSize;				
	DWORD	flAllocationType;
	DWORD	flProtect;

	PVOID	lpStore;				// Store for data written using WPM
	BYTE	bFlags;

	struct _tagHiMemoryContext *pNext;
	struct _tagHiMemoryContext *pPrev;

} HI_MEMORY_CONTEXT;

typedef struct _tagHiProcessContext
{
	HANDLE				hProcess;
	HI_MEMORY_CONTEXT	*MemoryAllocationList;

	struct _tagHiProcessContext	*pNext;
	struct _tagHiProcessContext *pPrev;
} HI_PROCESS_CONTEXT;

VOID StoreInit();
BOOL StoreHandleAllocation(HANDLE hProcess, LPVOID lpAddr, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
BOOL StoreHandleMemoryWrite(HANDLE hProcess, LPVOID lpTargetAddr, LPVOID lpBuffer, DWORD dwSize);
BOOL StoreIsMemoryWritten(HANDLE hProcess, LPVOID lpAddr);
VOID StoreExit();

HI_PROCESS_CONTEXT *StoreGetProcessContext(HANDLE hProcess);
HI_MEMORY_CONTEXT *StoreFindMemoryContext(HI_PROCESS_CONTEXT *pProcess, LPVOID lpAddr);


#endif