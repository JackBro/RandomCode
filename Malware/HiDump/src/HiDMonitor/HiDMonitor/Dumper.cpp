#define _CRT_SECURE_NO_WARNINGS
#include <windows.h>
#include <syelog.h>
#include <stdio.h>

#include "Config.h"
#include "Store.h"

static
DWORD gblDumperCounter = 0;

VOID DumperDumpMemory(HANDLE hProcess, LPVOID lpTargetAddr, CHAR *pTag)
{
	HI_PROCESS_CONTEXT	*pCtx;
	HI_MEMORY_CONTEXT	*mCtx;
	CHAR				szFilePath[MAX_PATH + 1];
	HANDLE				hFile;
	DWORD				dw;

	pCtx = StoreGetProcessContext(hProcess);
	if(!pCtx) {
		Syelog(SYELOG_SEVERITY_NOTICE, "Dumper: Failed to find process context for HANDLE: 0x%08x", hProcess);
		return;
	}

	mCtx = StoreFindMemoryContext(pCtx, lpTargetAddr);
	if(!mCtx) {
		Syelog(SYELOG_SEVERITY_NOTICE, "Dumper: Failed to find memory context for ADDR: 0x%08x", (DWORD) lpTargetAddr);
		return;
	}

	_snprintf(szFilePath, MAX_PATH, "%s\\%s_%08x_%08x_%d.mem",
		MONITOR_CONFIG->szWorkingDir, pTag, pCtx->hProcess, (DWORD) lpTargetAddr, gblDumperCounter++);

	Syelog(SYELOG_SEVERITY_NOTICE, "Dumper: Dumping to file: %s", szFilePath);

	hFile = CreateFileA(szFilePath, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, 0, NULL);
	if(hFile == INVALID_HANDLE_VALUE) {
		Syelog(SYELOG_SEVERITY_NOTICE, "Dumper: Failed to open file. (GLE: %d)", GetLastError());
		return;
	}

	WriteFile(hFile, mCtx->lpStore, mCtx->dwSize, &dw, NULL);
	CloseHandle(hFile);
}